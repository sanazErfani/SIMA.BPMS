// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SIMA.BPMS.Persistance.EF.Persistence;

#nullable disable

namespace SIMA.BPMS.Persistance.EF.Migrations
{
    [DbContext(typeof(BPMSContext))]
    partial class BPMSContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SIMA.BPMS.Domain.Models.ActionTypes.Entities.ActionType", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("EventInternalTag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventTag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ActionType", "Workflow");
                });

            modelBuilder.Entity("SIMA.BPMS.Domain.Models.Actions.Entities.Action", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("ActionTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("BpmnEventId")
                        .HasColumnType("bigint");

                    b.Property<long>("BpmnId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("WorkflowId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ActionTypeId");

                    b.HasIndex("WorkflowId");

                    b.ToTable("Action", "Workflow");
                });

            modelBuilder.Entity("SIMA.BPMS.Domain.Models.ActorActions.Entities.ActorAction", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("ActionId")
                        .HasColumnType("bigint");

                    b.Property<long>("ActorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("ActorId");

                    b.ToTable("ActorAction", "Workflow");
                });

            modelBuilder.Entity("SIMA.BPMS.Domain.Models.ActorSets.Entities.ActorSet", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("BpmnId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("WorkflowId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowId");

                    b.ToTable("ActorSet", "Workflow");
                });

            modelBuilder.Entity("SIMA.BPMS.Domain.Models.Actors.Entities.Actor", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("ActorSetId")
                        .HasColumnType("bigint");

                    b.Property<long>("BpmnId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("WorkflowId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ActorSetId");

                    b.HasIndex("WorkflowId");

                    b.ToTable("Actor", "Workflow");
                });

            modelBuilder.Entity("SIMA.BPMS.Domain.Models.Processes.Entities.Process", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("BpmnEventId")
                        .HasColumnType("bigint");

                    b.Property<long>("BpmnId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceRefBpmnId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SourceRefId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetRefBpmnId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TargetRefId")
                        .HasColumnType("bigint");

                    b.Property<long>("WorkflowId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SourceRefId");

                    b.HasIndex("TargetRefId");

                    b.HasIndex("WorkflowId");

                    b.ToTable("Process", "Workflow");
                });

            modelBuilder.Entity("SIMA.BPMS.Domain.Models.Workflows.Entities.Workflow", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("BpmnId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("FileContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Workflow", "Workflow");
                });

            modelBuilder.Entity("SIMA.BPMS.Domain.Models.Actions.Entities.Action", b =>
                {
                    b.HasOne("SIMA.BPMS.Domain.Models.ActionTypes.Entities.ActionType", "ActionType")
                        .WithMany("Actions")
                        .HasForeignKey("ActionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIMA.BPMS.Domain.Models.Workflows.Entities.Workflow", "Workflow")
                        .WithMany("Actions")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActionType");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("SIMA.BPMS.Domain.Models.ActorActions.Entities.ActorAction", b =>
                {
                    b.HasOne("SIMA.BPMS.Domain.Models.Actions.Entities.Action", "Action")
                        .WithMany("ActorActions")
                        .HasForeignKey("ActionId")
                        .IsRequired();

                    b.HasOne("SIMA.BPMS.Domain.Models.Actors.Entities.Actor", "Actor")
                        .WithMany("ActorActions")
                        .HasForeignKey("ActorId")
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("Actor");
                });

            modelBuilder.Entity("SIMA.BPMS.Domain.Models.ActorSets.Entities.ActorSet", b =>
                {
                    b.HasOne("SIMA.BPMS.Domain.Models.Workflows.Entities.Workflow", "Workflow")
                        .WithMany("ActorSets")
                        .HasForeignKey("WorkflowId")
                        .IsRequired();

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("SIMA.BPMS.Domain.Models.Actors.Entities.Actor", b =>
                {
                    b.HasOne("SIMA.BPMS.Domain.Models.ActorSets.Entities.ActorSet", "ActorSet")
                        .WithMany("Actors")
                        .HasForeignKey("ActorSetId")
                        .IsRequired();

                    b.HasOne("SIMA.BPMS.Domain.Models.Workflows.Entities.Workflow", "Workflow")
                        .WithMany("Actors")
                        .HasForeignKey("WorkflowId")
                        .IsRequired();

                    b.Navigation("ActorSet");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("SIMA.BPMS.Domain.Models.Processes.Entities.Process", b =>
                {
                    b.HasOne("SIMA.BPMS.Domain.Models.Actions.Entities.Action", "SourceRef")
                        .WithMany("ProcessSources")
                        .HasForeignKey("SourceRefId")
                        .IsRequired();

                    b.HasOne("SIMA.BPMS.Domain.Models.Actions.Entities.Action", "TargetRef")
                        .WithMany("ProcessTargets")
                        .HasForeignKey("TargetRefId")
                        .IsRequired();

                    b.HasOne("SIMA.BPMS.Domain.Models.Workflows.Entities.Workflow", "Workflow")
                        .WithMany("Processes")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SourceRef");

                    b.Navigation("TargetRef");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("SIMA.BPMS.Domain.Models.ActionTypes.Entities.ActionType", b =>
                {
                    b.Navigation("Actions");
                });

            modelBuilder.Entity("SIMA.BPMS.Domain.Models.Actions.Entities.Action", b =>
                {
                    b.Navigation("ActorActions");

                    b.Navigation("ProcessSources");

                    b.Navigation("ProcessTargets");
                });

            modelBuilder.Entity("SIMA.BPMS.Domain.Models.ActorSets.Entities.ActorSet", b =>
                {
                    b.Navigation("Actors");
                });

            modelBuilder.Entity("SIMA.BPMS.Domain.Models.Actors.Entities.Actor", b =>
                {
                    b.Navigation("ActorActions");
                });

            modelBuilder.Entity("SIMA.BPMS.Domain.Models.Workflows.Entities.Workflow", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("ActorSets");

                    b.Navigation("Actors");

                    b.Navigation("Processes");
                });
#pragma warning restore 612, 618
        }
    }
}
